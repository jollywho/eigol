##Structure##
struct {
  state, //counted per iteration
} cell

cell[col][row] p_cycle //current iteration
cell[col][row] n_cycle //next iteration

!--only alive elements are stored--!

!--when counting a cell's neighbours, mark
each node as 'read' so the next cell that has
the same overlapping neighbour does not
calculate it
 .  .  .
   |x| x  x

 r  r  .  .
    x |x| x

 r  r  r  .  .
    x  x |x|
--!

#Cell#
==inital board==
  ABC
  xxx
==traversal stage==
-iterate list of alive cells in p_cycle.
-iterate the block surrounding a cell.
A00,A01,A02
A10,A11,A12
A20,A21,A22
==breeding stage==
-for each cell in the block, count the
surrounding cells for any other alive cells.
-if a surrounding cell does not exist in p_cycle it is
assumed to not exist.
-if status is true, return the value without counting.
-if count is exactly 3, the cell is copied to n_cycle.
-set sttus to true on p_cycle.
-return the count.
-----------
 ...
 .xxx
 ...
-----------
  ...
  xxx
  ...
-----------
   ...
  xxx.
   ...
==survival stage==
-if the count is not exactly 2, the cell dies and nothing
is copied to n_cycle.
##Render#
